// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file MEMPHYS_vis.license for terms.

#ifndef MEMPHYS_vis_main
#define MEMPHYS_vis_main

#include "version"

#ifdef _WIN32
#include <windows.h>
#undef ABSOLUTE
#undef RELATIVE
#endif

#include "background_popup"
#include "opener"
#include "insh"

#include <exlib/geant4/output>
#include <exlib/geant4/viewer>
#include <exlib/insh/app>
#include <exlib/insh/g4>
#include <exlib/uzres>

//////////////////////////////////////////////////////
/// sim //////////////////////////////////////////////
//////////////////////////////////////////////////////
#include <MEMPHYS/Analysis.hh>
#include <MEMPHYS/DetectorConstruction.hh>
#include <MEMPHYS/PhysicsList.hh>
#include <MEMPHYS/PrimaryGeneratorAction.hh>
#include <MEMPHYS/RunAction.hh>
#include <MEMPHYS/EventAction.hh>
#include <MEMPHYS/RunAction.hh>
#include <MEMPHYS/StackingAction.hh>
#include <MEMPHYS/TrackingAction.hh>
#include <MEMPHYS/SteppingAction.hh>
#include <MEMPHYS/Trajectory.hh>

//#define USE_ATTDEF

#ifdef USE_ATTDEF
#else
#include <MEMPHYS/WCHit.hh>
#include <MEMPHYS/WCDigi.hh>
#endif

#include <G4Version.hh>

#ifdef EXLIB_HAS_PYTHIA8
#include <pythia/pythia_version.h>
#endif

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

#define CHECK_ENV(a__name) \
  if(!inlib::is_env(#a__name)) {\
    a_out << "MEMPHYS_vis::main: env variable " << #a__name << " not defined." << std::endl;\
    return;\
  }
  
#define DUMP_ENV(a__name) \
 {std::string value;\
  if(!inlib::get_env(#a__name,value)) {\
    a_out << "MEMPHYS_vis::main: get_env (" << inlib::sout(#a__name) << " failed." << std::endl;\
    return;\
  }\
  a_out << "MEMPHYS_vis::main : get_env " << inlib::sout(#a__name) << ", value " << inlib::sout(value) << std::endl;}
  
#define UNFOLD_RES_FILE(a__zip,a__env,a__tmp_prefix,a__dir) \
  if(!exlib::unfold(a_out,a_doc_dir,a_res_dir,a_tmp_dir,m_tmp_dirs,a__zip,exlib::geant4::s_##a__env(),a__tmp_prefix,a__dir)) {\
    a_out << "MEMPHYS_vis::main: exlib::unfold() failed : zip file " << inlib::sout(a__zip)\
          << ", env " << inlib::sout(exlib::geant4::s_##a__env()) << "." << std::endl;\
    return;\
  }

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

namespace MEMPHYS_vis {

class main: public exlib::geant4::output, public exlib::geant4::viewer {
  typedef exlib::geant4::output parent_output;
  typedef exlib::geant4::viewer parent_viewer;
public:
  static const std::string& s_version() {
    static const std::string s_v(MEMPHYS_VIS_VERSION);
    return s_v;
  }
  static const std::string& s_args_help() {
    static const std::string s_v;
    return s_v;
  }
protected:
  INLIB_CLASS_STRING(MEMPHYS_vis_)
protected: //insh  
  EXLIB_INSH_APP_HEADER(main)
  static void insh_app_version(inlib::ishell& a_insh,const std::vector<std::string>&) {
    a_insh.out(MEMPHYS_VIS_VERSION);
  }
public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_doc_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent_output(a_out,a_verbose?true:false)
  ,parent_viewer("MEMPHYS_vis",MEMPHYS_VIS_VERSION,
                 a_out,a_gl_mgr,a_ttf,a_selection,
		 a_doc_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,m_run_manager(0)
  ,m_analysis(0)
  {
    //////////////////////////////////////
    /// insh: ////////////////////////////
    //////////////////////////////////////
    insh_app_add_cmds();
    EXLIB_INSH_G4_ADDS(insh(),*this)

    INLIB_INSH_ADD_ISHELL_ARGS_GEANT4_OUTPUT_CMD(insh(),*this,g4_output,
      exlib::insh_g4_output,
"g4_output: g4_output enable/disable\n\
  Enable, disable Geant4 output.\n\
  Example:\n\
    g4_output enable\n\
    g4_apply_command '/control/verbose 2'\n\
    g4_apply_command '/run/verbose 2'\n\
    g4_beam_on\n\
    g4_output disable\n\
    g4_beam_on\n\
")

    INLIB_INSH_ADD_ISHELL_ARGS_CMD(insh(),app_version,
      insh_app_version,
      "app_version: app_version\n  Print the application version.\n")
    MEMPHYS_VIS_INSH_ADDS(insh(),*this)
    
    //////////////////////////////////////
    /// Geant4 MEMPHYS sim : /////////////
    //////////////////////////////////////
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=1030
    UNFOLD_RES_FILE("g4ndl_4_5.zip",G4NEUTRONHPDATA,s_MEMPHYS_vis_(),"G4NDL4.5");
    UNFOLD_RES_FILE("g4emlow_6_50.zip",G4LEDATA,s_MEMPHYS_vis_(),"G4EMLOW6.50");
    UNFOLD_RES_FILE("g4ensdfstate_2_1.zip",G4ENSDFSTATEDATA,s_MEMPHYS_vis_(),"G4ENSDFSTATE2.1");
    UNFOLD_RES_FILE("g4saiddata_1_1.zip",G4SAIDXSDATA,s_MEMPHYS_vis_(),"G4SAIDDATA1.1");
    UNFOLD_RES_FILE("photonevaporation_4_3_2.zip",G4LEVELGAMMADATA,s_MEMPHYS_vis_(),"PhotonEvaporation4.3.2");
    CHECK_ENV(G4NEUTRONHPDATA)
    CHECK_ENV(G4LEDATA)
    CHECK_ENV(G4LEVELGAMMADATA)
    CHECK_ENV(G4ENSDFSTATEDATA)
    CHECK_ENV(G4SAIDXSDATA)
  //DUMP_ENV(G4NEUTRONHPDATA)
  //DUMP_ENV(G4LEDATA)
  //DUMP_ENV(G4LEVELGAMMADATA)
  //DUMP_ENV(G4ENSDFSTATEDATA)
  //DUMP_ENV(G4SAIDXSDATA)
#elif defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=950
    UNFOLD_RES_FILE("g4ndl_3_12.zip",G4NEUTRONHPDATA,s_MEMPHYS_vis_(),"G4NDL3.12");
    UNFOLD_RES_FILE("g4emlow_6_50.zip",G4LEDATA,s_MEMPHYS_vis_(),"G4EMLOW6.50");
    UNFOLD_RES_FILE("photonevaporation_4_3_2.zip",G4LEVELGAMMADATA,s_MEMPHYS_vis_(),"PhotonEvaporation4.3.2");
    CHECK_ENV(G4NEUTRONHPDATA)
    CHECK_ENV(G4LEDATA)
    CHECK_ENV(G4LEVELGAMMADATA)
#elif defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=820
    UNFOLD_RES_FILE("g4ndl_3_12.zip",NeutronHPCrossSections,s_MEMPHYS_vis_(),"G4NDL3.12");
    UNFOLD_RES_FILE("g4emlow_6_50.zip",G4LEDATA,s_MEMPHYS_vis_(),"G4EMLOW6.50");
    UNFOLD_RES_FILE("photonevaporation_4_3_2.zip",G4LEVELGAMMADATA,s_MEMPHYS_vis_(),"PhotonEvaporation4.3.2");
    CHECK_ENV(NeutronHPCrossSections)
    CHECK_ENV(G4LEDATA)
    CHECK_ENV(G4LEVELGAMMADATA)
#endif
  //CHECK_ENV(G4RADIOACTIVEDATA)
  
#ifdef EXLIB_HAS_PYTHIA8
   {std::string svers(PYTHIA_VERSION); //should be guessed from Pythia itself.
    std::string file = "pythia_"+svers+"_xmldoc.zip";
    std::string sdir = "pythia_"+svers+inlib::sep()+"xmldoc";
    UNFOLD_RES_FILE(file,PYTHIA8DATA,s_MEMPHYS_vis_(),sdir);}
    CHECK_ENV(PYTHIA8DATA)
#endif

    m_run_manager = new G4RunManager;
    
    m_run_manager->SetGeometryToBeOptimized(false); //JEC 21/4/06 test to speed up the closing phase
                                                    //note that G.B suspect memory leak with valgrind
    
    m_analysis = new MEMPHYS::Analysis("",false); //false=do not care of MEMPHYS.root file.
    MEMPHYS::DetectorConstruction* detector = new MEMPHYS::DetectorConstruction(*m_analysis);
    m_run_manager->SetUserInitialization(detector); //it takes ownship.
    m_run_manager->SetUserInitialization(new MEMPHYS::PhysicsList);

    G4UImanager* UI = G4UImanager::GetUIpointer();        
    if(UI) {
      std::string path;
      if(find_doc_res_file("job_options.mac",path) && path.size()) {
        UI->ApplyCommand("/control/execute "+path);
      }
    }      
  
    MEMPHYS::PrimaryGeneratorAction* primary_generator_action =
      new MEMPHYS::PrimaryGeneratorAction(*detector,m_res_dir);
    primary_generator_action->set_rewind(true);

    m_run_manager->SetUserAction(primary_generator_action);

    MEMPHYS::RunAction* run_action = new MEMPHYS::RunAction();

    m_run_manager->SetUserAction(run_action);
  
    // optional user action classes
    MEMPHYS::EventAction* event_action = 
      new MEMPHYS::EventAction(*m_analysis,*run_action,*detector,*primary_generator_action); 
    event_action->set_verbose(0);
    m_run_manager->SetUserAction(event_action);

    m_run_manager->SetUserAction(new MEMPHYS::TrackingAction);
    m_run_manager->SetUserAction(new MEMPHYS::StackingAction);
    m_run_manager->SetUserAction(new MEMPHYS::SteppingAction);

    m_run_manager->Initialize();

    m_opener.add_ext(".memphys");
    m_opener.add_opener("format_memphys",new MEMPHYS_vis::opener(*primary_generator_action));

    if(UI) {
      std::string path;
      if(find_doc_res_file("init.g4m",path) && path.size()) {
        UI->ApplyCommand("/control/execute "+path);
      }
    }
  }
  virtual ~main() {
    delete m_analysis;
    delete m_run_manager;
    clear_tmp();
  }
protected:
  main(const main& a_from)
  :inlib::sg::ui(a_from)
  ,parent_output(a_from.out(),true)
  ,parent_viewer(a_from)
  ,m_run_manager(0)
  ,m_analysis(0)
  {}
private:
  main& operator=(const main&){return *this;}
protected:
  G4RunManager* m_run_manager;
  MEMPHYS::Analysis* m_analysis;
};

#undef CHECK_ENV
#undef UNFOLD_RES_FILE

}

#endif
