// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file MEMPHYS_vis.license for terms.

#ifndef MEMPHYS_vis_opener
#define MEMPHYS_vis_opener

#include <inlib/sg/gui_viewer>
#include <inlib/signature>

#include <MEMPHYS/PrimaryGeneratorAction.hh>

namespace MEMPHYS_vis {

inline bool is_memphys(const std::string& a_file,bool& a_is){
  unsigned char head[8];
 {unsigned int num = 8;
  if(!inlib::file::signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=8) {a_is = false;return true;}}
  if(head[0]!=' ') {a_is = false;return true;}
  if(head[1]!='$') {a_is = false;return true;}
  if(head[2]!=' ') {a_is = false;return true;}
  if(head[3]!='b') {a_is = false;return true;}
  if(head[4]!='e') {a_is = false;return true;}
  if(head[5]!='g') {a_is = false;return true;}
  if(head[6]!='i') {a_is = false;return true;}
  if(head[7]!='n') {a_is = false;return true;}
  a_is = true;  
  return true;
}

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;

  INLIB_SCLASS(MEMPHYS_vis::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    std::string sfx;
    inlib::suffix(a_path,sfx);
    if(sfx=="memphys") {a_is = true;return true;}
#ifdef ANDROID
    // case of a file given as a "DOCUMENT" (without suffix) by another app (file manager, gmail) :
    std::string name;
    inlib::base_name(a_path,name);
    if(name=="DOCUMENT") {return is_memphys(a_path,a_is);}
#endif
    a_is = false;
    return true;
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args&,
                    bool& a_done) const {
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) {a_done = false;return false;}
    inlib::sg::gui_viewer& a_gv = *_gv;
    m_primary_generator_action.OpenVectorFile(a_path);
    a_gv.hide_main_menu();
    a_done = true;
    return true;
  }
  virtual bool is(inlib::uint64,const char*,bool& a_is) const {a_is = false;return true;}
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,

                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  opener(MEMPHYS::PrimaryGeneratorAction& a_primary_generator_action)
  :m_primary_generator_action(a_primary_generator_action) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from):parent(a_from),m_primary_generator_action(a_from.m_primary_generator_action) {
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}
protected:  
  MEMPHYS::PrimaryGeneratorAction& m_primary_generator_action;
};

}

#endif
